// ethash: C/C++ implementation of Ethash, the Ethereum Proof of Work algorithm.
// Copyright 2021 Pawel Bylica.
// Licensed under the Apache License, Version 2.0.

#include "../experimental/difficulty.h"
#include "helpers.hpp"
#include <gtest/gtest.h>

namespace
{
struct difficulty_test_case
{
    const char* difficulty_hex;
    const char* boundary_hex;
};

difficulty_test_case difficulty_test_cases[] = {
    // clang-format off
    {"0000000000000000000000000000000000000000000000000000000000000000", "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},
    {"0000000000000000000000000000000000000000000000000000000000000001", "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"},
    {"0000000000000000000000000000000000000000000000000000000000000002", "8000000000000000000000000000000000000000000000000000000000000000"},
    {"0000000000000000000000000000000000000000000000000000000000000003", "5555555555555555555555555555555555555555555555555555555555555555"},
    {"00000000000000000000000000000000000000000000000000000000ffffffff", "0000000100000001000000010000000100000001000000010000000100000001"},
    {"0000000000000000000000000000000000000000000000000000000100000000", "0000000100000000000000000000000000000000000000000000000000000000"},
    {"0000000000000000000000000000000000000000000000000000000100000000", "0000000100000000000000000000000000000000000000000000000000000000"},
    {"00000000000000000000000000000000000000000080000000a6000000000000", "0000000000000000000001fffffffd680000035d1ffffba33a8005a85021f8a9"},
    {"0000000000000000000000000000000000000000000000010000000000000000", "0000000000000001000000000000000000000000000000000000000000000000"},
    {"000000000000000000000001000000000000000000000000000000d200000000", "0000000000000000000000000000000000000000ffffffffffffffffffffffff"},
    {"00000001000000000000000000ffff0000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000ffffffff"},
    {"0200000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000080"},
    {"0200000000000000000000000000000000000000000000000000000000000001", "000000000000000000000000000000000000000000000000000000000000007f"},
    {"0a00000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000019"},
    {"4000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000004"},
    {"4000000000000000000000000000000000000000000000000000000000000001", "0000000000000000000000000000000000000000000000000000000000000003"},
    {"8000000000000000000000000000000000000000000000000000000000000000", "0000000000000000000000000000000000000000000000000000000000000002"},
    // clang-format on
};
}  // namespace

TEST(difficulty, difficulty_to_boundary)
{
    for (const auto& t : difficulty_test_cases)
    {
        const auto difficulty = to_hash256(t.difficulty_hex);
        EXPECT_EQ(to_hex(ethash_difficulty_to_boundary(&difficulty)), t.boundary_hex);
    }
}
